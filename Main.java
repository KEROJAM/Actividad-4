import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Clase principal que contiene el sistema de gesti√≥n de empleados.
 * Proporciona una interfaz de men√∫ para interactuar con el √°rbol binario de b√∫squeda.
 */
public class Main {
    /**
     * M√©todo est√°tico para leer empleados desde un archivo CSV.
     * @param archivo ruta del archivo CSV a leer
     * @param logFile archivo donde registrar las operaciones de carga
     * @return lista de empleados le√≠dos del archivo
     */
    private static List<Empleado> leerEmpleadosDesdeCSV(String archivo, String logFile) {
        List<Empleado> empleados = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(archivo));
             PrintWriter logWriter = new PrintWriter(new FileWriter(logFile, true))) {
            
            // Saltar la l√≠nea de encabezado
            String line = br.readLine();
            
            // Log del inicio de carga de empleados
            logWriter.println("Iniciando carga de empleados desde " + archivo + " " + LocalDate.now() + " " + LocalTime.now());
            logWriter.flush();

            while ((line = br.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 2) {
                    int id = Integer.parseInt(datos[0].trim());
                    String nombre = datos[1].trim();
                    empleados.add(new Empleado(nombre, id));
                    
                    // Log de cada empleado cargado
                    logWriter.println("Empleado cargado: " + nombre + " (ID: " + id + ") " + LocalDate.now() + " " + LocalTime.now());
                    logWriter.flush();
                }
            }
            
            // Log del final de carga
            logWriter.println("Carga completada. Total empleados: " + empleados.size() + " " + LocalDate.now() + " " + LocalTime.now());
            logWriter.flush();
            
        } catch (IOException e) {
            System.err.println("Error al leer el archivo: " + e.getMessage());
        }

        return empleados;
    }

    private static Tree tree;
    private static List<Empleado> empleadosList;
    private static Scanner scanner = new Scanner(System.in);

    /**
     * M√©todo principal que inicializa el sistema y muestra el men√∫ de opciones.
     * Carga los empleados desde CSV, crea el √°rbol binario y gestiona la interfaz de usuario.
     * @param args argumentos de l√≠nea de comandos (no utilizados)
     * @throws IOException si hay problemas al leer archivos o crear logs
     */
    public static void main(String[] args) throws IOException {
        // Inicializar el sistema
        System.out.println("=== SISTEMA DE GESTI√ìN DE EMPLEADOS ===");
        System.out.println("Cargando empleados desde CSV...");
        
        empleadosList = leerEmpleadosDesdeCSV("list.csv", "logs.log");
        tree = new Tree("logs.log");
        
        // Cargar empleados en el √°rbol
        for (Empleado emp : empleadosList) {
            tree.insert(emp);
        }
        
        System.out.println("‚úì Sistema inicializado con " + empleadosList.size() + " empleados");
        System.out.println("‚úì √Årbol binario de b√∫squeda creado");
        
        // Mostrar men√∫ principal
        mostrarMenuPrincipal();
        
        // Cerrar recursos
        tree.closeLog();
        scanner.close();
    }
    
    /**
     * Muestra el men√∫ principal del sistema y gestiona la navegaci√≥n entre opciones.
     * Controla el flujo principal de la aplicaci√≥n hasta que el usuario decide salir.
     */
    private static void mostrarMenuPrincipal() {
        int opcion;
        do {
            System.out.println("\n" + "=".repeat(50));
            System.out.println("         SISTEMA DE GESTI√ìN DE EMPLEADOS");
            System.out.println("=".repeat(50));
            System.out.println("1.  Mostrar todos los empleados");
            System.out.println("2.  Buscar empleado por ID");
            System.out.println("3.  Buscar empleado por nombre");
            System.out.println("4.  Agregar nuevo empleado");
            System.out.println("5.  Eliminar empleado");
            System.out.println("6.  Mostrar estad√≠sticas del √°rbol");
            System.out.println("7.  Comparar eficiencia: √Årbol vs B√∫squeda Secuencial");
            System.out.println("8.  Mostrar empleados ordenados (Inorder)");
            System.out.println("9.  Visualizar estructura del √°rbol");
            System.out.println("10. Mostrar √°rbol por niveles (BFS)");
            System.out.println("11. Mostrar √°rbol por niveles (Recursivo)");
            System.out.println("0.  Salir");
            System.out.println("=".repeat(50));
            System.out.print("Seleccione una opci√≥n: ");
            
            opcion = leerEntero();
            
            switch (opcion) {
                case 1:
                    mostrarTodosLosEmpleados();
                    break;
                case 2:
                    buscarPorID();
                    break;
                case 3:
                    buscarPorNombre();
                    break;
                case 4:
                    agregarEmpleado();
                    break;
                case 5:
                    eliminarEmpleado();
                    break;
                case 6:
                    mostrarEstadisticas();
                    break;
                case 7:
                    compararEficiencia();
                    break;
                case 8:
                    mostrarEmpleadosOrdenados();
                    break;
                case 9:
                    visualizarEstructuraArbol();
                    break;
                case 10:
                    mostrarArbolPorNiveles();
                    break;
                case 11:
                    mostrarArbolPorNivelesRecursivo();
                    break;
                case 0:
                    System.out.println("¬°Gracias por usar el sistema!");
                    break;
                default:
                    System.out.println("‚ùå Opci√≥n inv√°lida. Intente nuevamente.");
            }
        } while (opcion != 0);
    }
    
    /**
     * Muestra la lista completa de empleados registrados en el sistema.
     * Presenta los empleados en el orden en que fueron cargados desde el CSV.
     */
    private static void mostrarTodosLosEmpleados() {
        System.out.println("\n LISTA COMPLETA DE EMPLEADOS");
        System.out.println("-".repeat(40));
        if (empleadosList.isEmpty()) {
            System.out.println("No hay empleados registrados.");
            return;
        }
        
        for (int i = 0; i < empleadosList.size(); i++) {
            System.out.println((i + 1) + ". " + empleadosList.get(i));
        }
        System.out.println("-".repeat(40));
        System.out.println("Total: " + empleadosList.size() + " empleados");
    }
    
    /**
     * Permite al usuario buscar un empleado espec√≠fico por su ID.
     * Utiliza el √°rbol binario para b√∫squeda eficiente y mide el tiempo de ejecuci√≥n.
     */
    private static void buscarPorID() {
        System.out.print("\nüîç Ingrese el ID del empleado a buscar: ");
        int id = leerEntero();
        
        long startTime = System.nanoTime();
        Empleado empleado = tree.searchByID(id);
        long endTime = System.nanoTime();
        
        if (empleado != null) {
            System.out.println(" Empleado encontrado: " + empleado);
        } else {
            System.out.println(" No se encontr√≥ empleado con ID: " + id);
        }
        
        System.out.println("‚è±Ô∏è Tiempo de b√∫squeda: " + (endTime - startTime) + " nanosegundos");
    }
    
    /**
     * Permite al usuario buscar un empleado por su nombre.
     * La b√∫squeda es case-insensitive y mide el tiempo de ejecuci√≥n.
     */
    private static void buscarPorNombre() {
        System.out.print("\n Ingrese el nombre del empleado a buscar: ");
        scanner.nextLine(); // Limpiar buffer
        String nombre = scanner.nextLine();
        
        long startTime = System.nanoTime();
        Empleado empleado = tree.searchByName(nombre);
        long endTime = System.nanoTime();
        
        if (empleado != null) {
            System.out.println(" Empleado encontrado: " + empleado);
        } else {
            System.out.println(" No se encontr√≥ empleado con nombre: " + nombre);
        }
        
        System.out.println(" Tiempo de b√∫squeda: " + (endTime - startTime) + " nanosegundos");
    }
    
    /**
     * Permite agregar un nuevo empleado al sistema.
     * Genera autom√°ticamente el siguiente ID disponible y actualiza tanto el √°rbol como la lista.
     */
    private static void agregarEmpleado() {
        System.out.println("\n AGREGAR NUEVO EMPLEADO");
        
        // Generar autom√°ticamente el siguiente ID disponible
        int nuevoID = generarSiguienteID();
        
        System.out.print("Ingrese el nombre del empleado: ");
        scanner.nextLine(); // Limpiar buffer
        String nombre = scanner.nextLine().trim();
        
        if (nombre.isEmpty()) {
            System.out.println("‚ùå El nombre no puede estar vac√≠o");
            return;
        }
        
        Empleado nuevoEmpleado = new Empleado(nombre, nuevoID);
        tree.insert(nuevoEmpleado);
        empleadosList.add(nuevoEmpleado);
        
        System.out.println(" Empleado agregado exitosamente:");
        System.out.println(" ID asignado autom√°ticamente: " + nuevoID);
        System.out.println(" Empleado: " + nuevoEmpleado);
    }
    
    /**
     * Genera autom√°ticamente el siguiente ID disponible para un nuevo empleado.
     * Encuentra el ID m√°s alto existente y le suma 1.
     * @return el siguiente ID disponible
     */
    private static int generarSiguienteID() {
        if (empleadosList.isEmpty()) {
            return 1;
        }
        
        // Encontrar el ID m√°s alto y sumar 1
        int maxID = empleadosList.stream()
                                 .mapToInt(Empleado::getID)
                                 .max()
                                 .orElse(0);
        
        return maxID + 1;
    }
    
    /**
     * Permite eliminar un empleado del sistema por su ID.
     * Solicita confirmaci√≥n antes de proceder con la eliminaci√≥n.
     */
    private static void eliminarEmpleado() {
        System.out.print("\n Ingrese el ID del empleado a eliminar: ");
        int id = leerEntero();
        
        Empleado empleado = tree.searchByID(id);
        if (empleado == null) {
            System.out.println(" No se encontr√≥ empleado con ID: " + id);
            return;
        }
        
        System.out.println("Empleado a eliminar: " + empleado);
        System.out.print("¬øEst√° seguro? (s/n): ");
        scanner.nextLine(); // Limpiar buffer
        String confirmacion = scanner.nextLine();
        
        if (confirmacion.toLowerCase().startsWith("s")) {
            boolean eliminado = tree.delete(id);
            if (eliminado) {
                empleadosList.removeIf(emp -> emp.getID() == id);
                System.out.println(" Empleado eliminado exitosamente");
            } else {
                System.out.println(" Error al eliminar el empleado");
            }
        } else {
            System.out.println("Operaci√≥n cancelada");
        }
    }
    
    /**
     * Muestra estad√≠sticas del sistema incluyendo total de empleados,
     * empleado con menor y mayor ID, y altura estimada del √°rbol.
     */
    private static void mostrarEstadisticas() {
        System.out.println("\nüìä ESTAD√çSTICAS DEL SISTEMA");
        System.out.println("-".repeat(40));
        System.out.println("Total de empleados: " + tree.countNodes());
        
        try {
            Empleado min = tree.findMin();
            Empleado max = tree.findMax();
            System.out.println("Empleado con menor ID: " + min);
            System.out.println("Empleado con mayor ID: " + max);
        } catch (IllegalStateException e) {
            System.out.println("El √°rbol est√° vac√≠o");
        }
        
        System.out.println("Altura estimada del √°rbol: ~" + Math.ceil(Math.log(tree.countNodes()) / Math.log(2)));
    }
    
    /**
     * Compara la eficiencia entre b√∫squeda con √°rbol binario vs b√∫squeda secuencial.
     * Realiza ambas b√∫squedas con el mismo empleado y muestra m√©tricas de rendimiento.
     */
    private static void compararEficiencia() {
        System.out.println("\n‚ö° COMPARACI√ìN DE EFICIENCIA");
        System.out.println("=".repeat(50));
        
        if (empleadosList.isEmpty()) {
            System.out.println("No hay empleados para comparar");
            return;
        }
        
        // Seleccionar un empleado aleatorio para buscar
        int randomIndex = (int) (Math.random() * empleadosList.size());
        Empleado empleadoABuscar = empleadosList.get(randomIndex);
        int idABuscar = empleadoABuscar.getID();
        
        System.out.println("Buscando empleado: " + empleadoABuscar);
        System.out.println("En una base de datos de " + empleadosList.size() + " empleados");
        System.out.println("-".repeat(50));
        
        // B√∫squeda con √Årbol Binario
        System.out.println(" B√öSQUEDA CON √ÅRBOL BINARIO:");
        long startTime = System.nanoTime();
        Empleado resultadoArbol = tree.searchByID(idABuscar);
        long tiempoArbol = System.nanoTime() - startTime;
        System.out.println("   Resultado: " + (resultadoArbol != null ? "ENCONTRADO" : "NO ENCONTRADO"));
        System.out.println("   Tiempo: " + tiempoArbol + " nanosegundos");
        System.out.println("   Complejidad: O(log n) - " + Math.ceil(Math.log(empleadosList.size()) / Math.log(2)) + " comparaciones m√°ximas");
        
        // B√∫squeda Secuencial
        System.out.println("\n B√öSQUEDA SECUENCIAL:");
        startTime = System.nanoTime();
        Empleado resultadoSecuencial = busquedaSecuencial(empleadosList, idABuscar);
        long tiempoSecuencial = System.nanoTime() - startTime;
        System.out.println("   Resultado: " + (resultadoSecuencial != null ? "ENCONTRADO" : "NO ENCONTRADO"));
        System.out.println("   Tiempo: " + tiempoSecuencial + " nanosegundos");
        System.out.println("   Complejidad: O(n) - hasta " + empleadosList.size() + " comparaciones");
        
        // An√°lisis de eficiencia
        System.out.println("\n AN√ÅLISIS DE EFICIENCIA:");
        System.out.println("-".repeat(50));
        double mejora = (double) tiempoSecuencial / tiempoArbol;
        System.out.printf("   El √°rbol binario es %.2fx m√°s r√°pido\n", mejora);
        System.out.println("   Diferencia de tiempo: " + (tiempoSecuencial - tiempoArbol) + " nanosegundos");
        
        if (empleadosList.size() > 100) {
            System.out.println("\n VENTAJAS DEL √ÅRBOL BINARIO:");
            System.out.println("   ‚Ä¢ B√∫squeda m√°s eficiente: O(log n) vs O(n)");
            System.out.println("   ‚Ä¢ Escalabilidad: La diferencia aumenta con m√°s datos");
            System.out.println("   ‚Ä¢ Inserci√≥n y eliminaci√≥n eficientes");
            System.out.println("   ‚Ä¢ Datos autom√°ticamente ordenados");
        }
    }
    
    /**
     * Implementa b√∫squeda secuencial en la lista de empleados.
     * Utilizada para comparar eficiencia con el √°rbol binario.
     * @param lista lista de empleados donde buscar
     * @param id ID del empleado a buscar
     * @return empleado encontrado o null si no existe
     */
    private static Empleado busquedaSecuencial(List<Empleado> lista, int id) {
        for (Empleado emp : lista) {
            if (emp.getID() == id) {
                return emp;
            }
        }
        return null;
    }
    
    /**
     * Muestra los empleados ordenados por ID utilizando recorrido inorder del √°rbol.
     * Demuestra c√≥mo el BST mantiene autom√°ticamente el orden de los datos.
     */
    private static void mostrarEmpleadosOrdenados() {
        System.out.println("\n EMPLEADOS ORDENADOS POR ID (Recorrido Inorder)");
        System.out.println("-".repeat(50));
        if (tree.countNodes() == 0) {
            System.out.println("No hay empleados en el √°rbol");
            return;
        }
        
        tree.inorder();
        System.out.println("\n-".repeat(50));
        System.out.println("Los empleados se muestran autom√°ticamente ordenados por ID");
        System.out.println("gracias a las propiedades del √Årbol Binario de B√∫squeda");
    }
    
    /**
     * Muestra la estructura visual del √°rbol binario de b√∫squeda.
     * Presenta el √°rbol en formato gr√°fico para entender su organizaci√≥n.
     */
    private static void visualizarEstructuraArbol() {
        System.out.println("\n ESTRUCTURA VISUAL DEL √ÅRBOL BINARIO");
        System.out.println("=".repeat(50));
        if (tree.countNodes() == 0) {
            System.out.println("No hay empleados en el √°rbol");
            return;
        }
        
        tree.mostrarArbolVisual();
        System.out.println("\nExplicaci√≥n:");
        System.out.println("‚Ä¢ Los n√∫meros m√°s peque√±os est√°n a la IZQUIERDA");
        System.out.println("‚Ä¢ Los n√∫meros m√°s grandes est√°n a la DERECHA");
        System.out.println("‚Ä¢ Esta estructura permite b√∫squedas eficientes O(log n)");
    }
    
    /**
     * Muestra el √°rbol organizado por niveles de profundidad usando BFS.
     * √ötil para entender la altura y distribuci√≥n de los nodos.
     */
    private static void mostrarArbolPorNiveles() {
        System.out.println("\nüå≥ √ÅRBOL POR NIVELES (Breadth-First Search)");
        System.out.println("=".repeat(50));
        if (tree.countNodes() == 0) {
            System.out.println("No hay empleados en el √°rbol");
            return;
        }
        
        tree.mostrarArbolPorNiveles();
        System.out.println("\nInformaci√≥n:");
        System.out.println("‚Ä¢ Nivel 0: Ra√≠z del √°rbol");
        System.out.println("‚Ä¢ Cada nivel hacia abajo duplica el n√∫mero m√°ximo de nodos");
        System.out.println("‚Ä¢ La altura del √°rbol determina la eficiencia de b√∫squeda");
        System.out.println("‚Ä¢ Este m√©todo usa BFS para mostrar niveles completos");
    }
    
    /**
     * Muestra el √°rbol organizado por niveles usando m√©todo recursivo.
     * Alternativa al m√©todo BFS para comparar implementaciones.
     */
    private static void mostrarArbolPorNivelesRecursivo() {
        System.out.println("\nüå≥ √ÅRBOL POR NIVELES (M√©todo Recursivo)");
        System.out.println("=".repeat(50));
        if (tree.countNodes() == 0) {
            System.out.println("No hay empleados en el √°rbol");
            return;
        }
        
        tree.mostrarArbolPorNivelesRecursivo();
        System.out.println("\nInformaci√≥n:");
        System.out.println("‚Ä¢ Este m√©todo usa recursi√≥n para mostrar cada nivel");
        System.out.println("‚Ä¢ √ötil para entender la estructura recursiva del √°rbol");
        System.out.println("‚Ä¢ Compara con el m√©todo BFS (opci√≥n 10) para ver diferencias");
    }
    
    /**
     * M√©todo utilitario para leer un entero del usuario con validaci√≥n.
     * Maneja errores de entrada y solicita reingresar datos inv√°lidos.
     * @return entero v√°lido ingresado por el usuario
     */
    private static int leerEntero() {
        while (true) {
            try {
                return scanner.nextInt();
            } catch (Exception e) {
                System.out.print("‚ùå Ingrese un n√∫mero v√°lido: ");
                scanner.nextLine(); // Limpiar buffer
            }
        }
    }

}
